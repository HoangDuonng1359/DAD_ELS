@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class API_Google_translator {
  + translate(String, String, String): String
  + getLanguage(String): String
  + createURL(String, String, String): String
  - makeResult(StringBuilder): String
  + createNewToken(): String
}
class DatabaseConnection {
  + connect(String): Connection
  + Disconnection(Connection): void
}
class DictionaryController {
  + key_search(KeyEvent): void
  + playAudio(ActionEvent): void
  + setmodeva(ActionEvent): void
  + handleSearch(String): void
  + show_all_word(ActionEvent): void
  + initialize(): void
  + setmodeav(ActionEvent): void
  + handleMouseClickButtonSearch(MouseEvent): void
  + key_search_list_view(KeyEvent): void
  + handleMouseClickListView(MouseEvent): void
}
class DictionaryManagement {
  + showAllWords(): ObservableList
  + prexSearch(String): ObservableList?
  + remove(String): void
  + insert(String, String): void
  + insertFromCommandline(): void
  + Search(String): String
  + setExplain(String, String): void
  + insertFromFile(): void
}
class DictionaryManagementDatabase {
  + Search(String, String): String
  + prexSearch(String, String): ObservableList
  + numberChange(String): int
  + show_all_word(String): ObservableList
}
class ELSApplication {
  + main(String[]): void
  + start(Stage): void
}
class FlashCardController {
  + initGame(): void
  + handleMouseClickLabel(ActionEvent): void
  + initialize(): void
}
class GoogleTranslateController {
  + playAudioIn(ActionEvent): void
  + comboBoxChanged(ActionEvent): void
  + translateEvent(ActionEvent): void
  + playAudioOut(ActionEvent): void
  + initialize(): void
}
class HomeController {
  + initialize(): void
}
class Main {
  + main(String[]): void
}
class MultiChoiceGameController {
  + initialize(): void
  - correctAnswer(Button): void
  + endgame(ActionEvent): void
  - createQuestion(Quiz): String
  - initgame(): void
  - Import_data_form_file(): void
  - newTurn(): void
  + checkAnswer(ActionEvent): void
  - wrongAnswer(Button, Button): void
   score: Quiz
   buttonCorrect: Button
   question: Quiz
   choice: String[]
}
class PictureGuessingGameController {
  + key_submit(KeyEvent): void
  + endGame(ActionEvent): void
  + initialize(): void
  - baseSubmit(): void
  + startGame(ActionEvent): void
  + submit(ActionEvent): void
}
class ProfileController {
  + initialize(): void
  + changePassword(ActionEvent): void
  + changeAvata(ActionEvent): void
  - init(): void
  + changeName(ActionEvent): void
  + reset_default(ActionEvent): void
}
class Question {
  + checkAnswer(String): boolean
   question: String
   answer: String
   choice: String[]
}
class Question {
  - createques(String): void
  + checkAnswer(String): boolean
   result: String
   image: Image
   ques: String
}
class Quiz {
  - random(): int
  + guess(String): boolean
  + newQuiz(): void
  + addQuestion(Question): void
  + nextQuestion(): void
   questionIndex: int
   lengthQuestionList: int
   questionNumber: int
   finished: boolean
   currentQuestion: Question
   score: int
}
class Quiz {
  - random(): int
  + newQuiz(): void
  + addQuestion(Question): void
  + nextQuestion(): void
  + guess(String): boolean
   questionIndex: int
   lengthQuestionList: int
   questionNumber: int
   finished: boolean
   currentQuestion: Question
   score: int
}
class RecentW {
  + closefile(): void
  + getExplain(String): String
  - randomNum(int, int): int
  + getHistory(String): ObservableList
  + init(): void
  + addDB(String, String): void
  + add(String): void
  + initDB(): void
   word: String
}
class Record {
  + getScore(String, User): int
  + updateMaxScore(String, int, User): void
}
class SceneManage {
  + showScene(Parent, Stage, Scene, ActionEvent, String): void
  + setAvatar(Button, Image): void
  + newAlert(String, String, String): void
  + newErrorAlert(String, String, String): void
}
class SignUpController {
  + initialize(): void
  + signup_submit(ActionEvent): void
}
class SigninController {
  - sign_submit(ActionEvent): void
  + initialize(): void
  - openFormSignUp(ActionEvent): void
}
class Trie {
  ~ search(Trie, String): Trie
  ~ dfs(Trie, ArrayList<String>): void
  ~ insert(Trie, Word): void
  ~ remove(Trie, String): void
   newNode: Trie
}
class User {
   avata: Image
   name: String
   pass: String
   id: int
}
class Word {
  - check(char): boolean
   explain: String
   target: String
}
class WordListController
class addAndEditController {
  + setmodeav(ActionEvent): void
  + initialize(): void
  + setmodeva(ActionEvent): void
  + addWord(ActionEvent): void
}
class baseFormController {
  + openFormHome(ActionEvent): void
  + newAlert(Stage, String, String, String): void
  + openFormGame(ActionEvent): void
  + initialize(): void
  + openFormDelete(ActionEvent): void
  + setmodeav(ActionEvent): void
  + openProfile(ActionEvent): void
  + openFormDictionary(ActionEvent): void
  + openFormGoogle(ActionEvent): void
  + openFormEdit(ActionEvent): void
  + getmode(CheckBox, CheckBox): String
  + openFormAddAndEdit(ActionEvent): void
  + setmodeva(ActionEvent): void
  + openFormMore(ActionEvent): void
   scene: Scene
}
class bookmarkmanagement {
  + addWord(String, String, User, String): void
  + deleteWord(String, String): void
  + targetExists(Connection, String, User, String): boolean
  + editWord(String, String, User, String): void
}
class changeNameController {
  + changeName(ActionEvent): void
  + backProfile(ActionEvent): void
}
class changePasswordController {
  + backProfile(ActionEvent): void
  + Change_password(ActionEvent): void
}
class database {
  + getAllImage(String): List<Image>
  + updateDatabaseWithImages(String): void
  + insertSoundToDB(String, String, String): void
  + insertToDatabase(String, String, String): void
  + main(String[]): void
  + getAllQuestion(String): List<Question>
}
class deleteWord {
  + key_delete_enter(KeyEvent): void
  + setmodeav(ActionEvent): void
  + deleteWord(ActionEvent): void
  + initialize(): void
  + setmodeva(ActionEvent): void
}
class editWordController {
  + setmodeav(ActionEvent): void
  + findWord(ActionEvent): void
  + editWord(ActionEvent): void
  + initialize(): void
  + setmodeva(ActionEvent): void
}
class game {
   player: String
}
class gameController {
  + openFormPGG(ActionEvent): void
  + openFormMultichoice(ActionEvent): void
  + openFormFlashCard(ActionEvent): void
}
class importData {
  + insertFromDB(String): List<Question>
  + main(String[]): void
  + importFormFileCSV(String): List<Question>?
  + insertToDB(): void
}
class manager_internet {
  + checkConnect(): boolean
}
class moreController {
  + openFormProfile(ActionEvent): void
}
class sound {
  + play(InputStream): void
  + main(String[]): void
  + get_Audio(String, String): void
  - generateNewToken(): String
  - generateSpeakURL(String, String): String
  + getAudio(String, String): InputStream
   instance: sound
}
class sound_manage {
  + getMediaByNameFromDB(String): Media
  + getMediaByNameFormSRC(String): Media
  + playMedia(Media): void
}
class user_management {
  + changeName(String): User
  + reset_default(User): boolean
  + chooseImage(Stage): Image?
  + imageToBytes(Image): byte[]
  + changeAvt(Stage): Image
  + Change_password(String, String): User
   avata: Image
   name: String
}

DictionaryController           -[#000082,plain]-^  baseFormController            
FlashCardController            -[#000082,plain]-^  baseFormController            
GoogleTranslateController      -[#000082,plain]-^  baseFormController            
HomeController                 -[#000082,plain]-^  baseFormController            
MultiChoiceGameController      -[#000082,plain]-^  baseFormController            
PictureGuessingGameController  -[#000082,plain]-^  baseFormController            
ProfileController              -[#000082,plain]-^  baseFormController            
SignUpController               -[#000082,plain]-^  baseFormController            
SigninController               -[#000082,plain]-^  baseFormController            
addAndEditController           -[#000082,plain]-^  baseFormController            
baseFormController             -[#000082,plain]-^  SceneManage                   
changeNameController           -[#000082,plain]-^  baseFormController            
changePasswordController       -[#000082,plain]-^  baseFormController            
deleteWord                     -[#000082,plain]-^  baseFormController            
editWordController             -[#000082,plain]-^  baseFormController            
gameController                 -[#000082,plain]-^  baseFormController            
moreController                 -[#000082,plain]-^  baseFormController            
@enduml
